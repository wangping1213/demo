/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hisign.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-5")
public class SysUser implements org.apache.thrift.TBase<SysUser, SysUser._Fields>, java.io.Serializable, Cloneable, Comparable<SysUser> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SysUser");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TRUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("trueName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("userLevel", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OPEN_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("openFlag", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DEFAULT_MODULE_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultModule", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("createUser", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_DATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createDatetime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("updateUser", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField UPDATE_DATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDatetime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField POLICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("policeId", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cardId", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField USER_TEL_FIELD_DESC = new org.apache.thrift.protocol.TField("userTel", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField USER_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("userUnit", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField IFIP_FIELD_DESC = new org.apache.thrift.protocol.TField("ifip", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField REV1_FIELD_DESC = new org.apache.thrift.protocol.TField("rev1", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField REV2_FIELD_DESC = new org.apache.thrift.protocol.TField("rev2", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField REV3_FIELD_DESC = new org.apache.thrift.protocol.TField("rev3", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField REV4_FIELD_DESC = new org.apache.thrift.protocol.TField("rev4", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField REV5_FIELD_DESC = new org.apache.thrift.protocol.TField("rev5", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField REV6_FIELD_DESC = new org.apache.thrift.protocol.TField("rev6", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField REV7_FIELD_DESC = new org.apache.thrift.protocol.TField("rev7", org.apache.thrift.protocol.TType.STRING, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SysUserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SysUserTupleSchemeFactory());
  }

  public String id; // required
  public String username; // required
  public String password; // required
  public String trueName; // required
  public String userLevel; // required
  public String openFlag; // required
  public String defaultModule; // required
  public String remark; // required
  public String createUser; // required
  public String createDatetime; // required
  public String updateUser; // required
  public String updateDatetime; // required
  public String policeId; // required
  public String cardId; // required
  public String userTel; // required
  public String userUnit; // required
  public String ip; // required
  public String ifip; // required
  public String rev1; // required
  public String rev2; // required
  public String rev3; // required
  public String rev4; // required
  public String rev5; // required
  public String rev6; // required
  public String rev7; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USERNAME((short)2, "username"),
    PASSWORD((short)3, "password"),
    TRUE_NAME((short)4, "trueName"),
    USER_LEVEL((short)5, "userLevel"),
    OPEN_FLAG((short)6, "openFlag"),
    DEFAULT_MODULE((short)7, "defaultModule"),
    REMARK((short)8, "remark"),
    CREATE_USER((short)9, "createUser"),
    CREATE_DATETIME((short)10, "createDatetime"),
    UPDATE_USER((short)11, "updateUser"),
    UPDATE_DATETIME((short)12, "updateDatetime"),
    POLICE_ID((short)13, "policeId"),
    CARD_ID((short)14, "cardId"),
    USER_TEL((short)15, "userTel"),
    USER_UNIT((short)16, "userUnit"),
    IP((short)17, "ip"),
    IFIP((short)18, "ifip"),
    REV1((short)19, "rev1"),
    REV2((short)20, "rev2"),
    REV3((short)21, "rev3"),
    REV4((short)22, "rev4"),
    REV5((short)23, "rev5"),
    REV6((short)24, "rev6"),
    REV7((short)25, "rev7");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USERNAME
          return USERNAME;
        case 3: // PASSWORD
          return PASSWORD;
        case 4: // TRUE_NAME
          return TRUE_NAME;
        case 5: // USER_LEVEL
          return USER_LEVEL;
        case 6: // OPEN_FLAG
          return OPEN_FLAG;
        case 7: // DEFAULT_MODULE
          return DEFAULT_MODULE;
        case 8: // REMARK
          return REMARK;
        case 9: // CREATE_USER
          return CREATE_USER;
        case 10: // CREATE_DATETIME
          return CREATE_DATETIME;
        case 11: // UPDATE_USER
          return UPDATE_USER;
        case 12: // UPDATE_DATETIME
          return UPDATE_DATETIME;
        case 13: // POLICE_ID
          return POLICE_ID;
        case 14: // CARD_ID
          return CARD_ID;
        case 15: // USER_TEL
          return USER_TEL;
        case 16: // USER_UNIT
          return USER_UNIT;
        case 17: // IP
          return IP;
        case 18: // IFIP
          return IFIP;
        case 19: // REV1
          return REV1;
        case 20: // REV2
          return REV2;
        case 21: // REV3
          return REV3;
        case 22: // REV4
          return REV4;
        case 23: // REV5
          return REV5;
        case 24: // REV6
          return REV6;
        case 25: // REV7
          return REV7;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("trueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("userLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPEN_FLAG, new org.apache.thrift.meta_data.FieldMetaData("openFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFAULT_MODULE, new org.apache.thrift.meta_data.FieldMetaData("defaultModule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_USER, new org.apache.thrift.meta_data.FieldMetaData("createUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATETIME, new org.apache.thrift.meta_data.FieldMetaData("createDatetime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_USER, new org.apache.thrift.meta_data.FieldMetaData("updateUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_DATETIME, new org.apache.thrift.meta_data.FieldMetaData("updateDatetime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POLICE_ID, new org.apache.thrift.meta_data.FieldMetaData("policeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_ID, new org.apache.thrift.meta_data.FieldMetaData("cardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_TEL, new org.apache.thrift.meta_data.FieldMetaData("userTel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_UNIT, new org.apache.thrift.meta_data.FieldMetaData("userUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IFIP, new org.apache.thrift.meta_data.FieldMetaData("ifip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REV1, new org.apache.thrift.meta_data.FieldMetaData("rev1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REV2, new org.apache.thrift.meta_data.FieldMetaData("rev2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REV3, new org.apache.thrift.meta_data.FieldMetaData("rev3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REV4, new org.apache.thrift.meta_data.FieldMetaData("rev4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REV5, new org.apache.thrift.meta_data.FieldMetaData("rev5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REV6, new org.apache.thrift.meta_data.FieldMetaData("rev6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REV7, new org.apache.thrift.meta_data.FieldMetaData("rev7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SysUser.class, metaDataMap);
  }

  public SysUser() {
  }

  public SysUser(
    String id,
    String username,
    String password,
    String trueName,
    String userLevel,
    String openFlag,
    String defaultModule,
    String remark,
    String createUser,
    String createDatetime,
    String updateUser,
    String updateDatetime,
    String policeId,
    String cardId,
    String userTel,
    String userUnit,
    String ip,
    String ifip,
    String rev1,
    String rev2,
    String rev3,
    String rev4,
    String rev5,
    String rev6,
    String rev7)
  {
    this();
    this.id = id;
    this.username = username;
    this.password = password;
    this.trueName = trueName;
    this.userLevel = userLevel;
    this.openFlag = openFlag;
    this.defaultModule = defaultModule;
    this.remark = remark;
    this.createUser = createUser;
    this.createDatetime = createDatetime;
    this.updateUser = updateUser;
    this.updateDatetime = updateDatetime;
    this.policeId = policeId;
    this.cardId = cardId;
    this.userTel = userTel;
    this.userUnit = userUnit;
    this.ip = ip;
    this.ifip = ifip;
    this.rev1 = rev1;
    this.rev2 = rev2;
    this.rev3 = rev3;
    this.rev4 = rev4;
    this.rev5 = rev5;
    this.rev6 = rev6;
    this.rev7 = rev7;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SysUser(SysUser other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetTrueName()) {
      this.trueName = other.trueName;
    }
    if (other.isSetUserLevel()) {
      this.userLevel = other.userLevel;
    }
    if (other.isSetOpenFlag()) {
      this.openFlag = other.openFlag;
    }
    if (other.isSetDefaultModule()) {
      this.defaultModule = other.defaultModule;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetCreateUser()) {
      this.createUser = other.createUser;
    }
    if (other.isSetCreateDatetime()) {
      this.createDatetime = other.createDatetime;
    }
    if (other.isSetUpdateUser()) {
      this.updateUser = other.updateUser;
    }
    if (other.isSetUpdateDatetime()) {
      this.updateDatetime = other.updateDatetime;
    }
    if (other.isSetPoliceId()) {
      this.policeId = other.policeId;
    }
    if (other.isSetCardId()) {
      this.cardId = other.cardId;
    }
    if (other.isSetUserTel()) {
      this.userTel = other.userTel;
    }
    if (other.isSetUserUnit()) {
      this.userUnit = other.userUnit;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetIfip()) {
      this.ifip = other.ifip;
    }
    if (other.isSetRev1()) {
      this.rev1 = other.rev1;
    }
    if (other.isSetRev2()) {
      this.rev2 = other.rev2;
    }
    if (other.isSetRev3()) {
      this.rev3 = other.rev3;
    }
    if (other.isSetRev4()) {
      this.rev4 = other.rev4;
    }
    if (other.isSetRev5()) {
      this.rev5 = other.rev5;
    }
    if (other.isSetRev6()) {
      this.rev6 = other.rev6;
    }
    if (other.isSetRev7()) {
      this.rev7 = other.rev7;
    }
  }

  public SysUser deepCopy() {
    return new SysUser(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.username = null;
    this.password = null;
    this.trueName = null;
    this.userLevel = null;
    this.openFlag = null;
    this.defaultModule = null;
    this.remark = null;
    this.createUser = null;
    this.createDatetime = null;
    this.updateUser = null;
    this.updateDatetime = null;
    this.policeId = null;
    this.cardId = null;
    this.userTel = null;
    this.userUnit = null;
    this.ip = null;
    this.ifip = null;
    this.rev1 = null;
    this.rev2 = null;
    this.rev3 = null;
    this.rev4 = null;
    this.rev5 = null;
    this.rev6 = null;
    this.rev7 = null;
  }

  public String getId() {
    return this.id;
  }

  public SysUser setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public SysUser setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public SysUser setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getTrueName() {
    return this.trueName;
  }

  public SysUser setTrueName(String trueName) {
    this.trueName = trueName;
    return this;
  }

  public void unsetTrueName() {
    this.trueName = null;
  }

  /** Returns true if field trueName is set (has been assigned a value) and false otherwise */
  public boolean isSetTrueName() {
    return this.trueName != null;
  }

  public void setTrueNameIsSet(boolean value) {
    if (!value) {
      this.trueName = null;
    }
  }

  public String getUserLevel() {
    return this.userLevel;
  }

  public SysUser setUserLevel(String userLevel) {
    this.userLevel = userLevel;
    return this;
  }

  public void unsetUserLevel() {
    this.userLevel = null;
  }

  /** Returns true if field userLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetUserLevel() {
    return this.userLevel != null;
  }

  public void setUserLevelIsSet(boolean value) {
    if (!value) {
      this.userLevel = null;
    }
  }

  public String getOpenFlag() {
    return this.openFlag;
  }

  public SysUser setOpenFlag(String openFlag) {
    this.openFlag = openFlag;
    return this;
  }

  public void unsetOpenFlag() {
    this.openFlag = null;
  }

  /** Returns true if field openFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenFlag() {
    return this.openFlag != null;
  }

  public void setOpenFlagIsSet(boolean value) {
    if (!value) {
      this.openFlag = null;
    }
  }

  public String getDefaultModule() {
    return this.defaultModule;
  }

  public SysUser setDefaultModule(String defaultModule) {
    this.defaultModule = defaultModule;
    return this;
  }

  public void unsetDefaultModule() {
    this.defaultModule = null;
  }

  /** Returns true if field defaultModule is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultModule() {
    return this.defaultModule != null;
  }

  public void setDefaultModuleIsSet(boolean value) {
    if (!value) {
      this.defaultModule = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public SysUser setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getCreateUser() {
    return this.createUser;
  }

  public SysUser setCreateUser(String createUser) {
    this.createUser = createUser;
    return this;
  }

  public void unsetCreateUser() {
    this.createUser = null;
  }

  /** Returns true if field createUser is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateUser() {
    return this.createUser != null;
  }

  public void setCreateUserIsSet(boolean value) {
    if (!value) {
      this.createUser = null;
    }
  }

  public String getCreateDatetime() {
    return this.createDatetime;
  }

  public SysUser setCreateDatetime(String createDatetime) {
    this.createDatetime = createDatetime;
    return this;
  }

  public void unsetCreateDatetime() {
    this.createDatetime = null;
  }

  /** Returns true if field createDatetime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDatetime() {
    return this.createDatetime != null;
  }

  public void setCreateDatetimeIsSet(boolean value) {
    if (!value) {
      this.createDatetime = null;
    }
  }

  public String getUpdateUser() {
    return this.updateUser;
  }

  public SysUser setUpdateUser(String updateUser) {
    this.updateUser = updateUser;
    return this;
  }

  public void unsetUpdateUser() {
    this.updateUser = null;
  }

  /** Returns true if field updateUser is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateUser() {
    return this.updateUser != null;
  }

  public void setUpdateUserIsSet(boolean value) {
    if (!value) {
      this.updateUser = null;
    }
  }

  public String getUpdateDatetime() {
    return this.updateDatetime;
  }

  public SysUser setUpdateDatetime(String updateDatetime) {
    this.updateDatetime = updateDatetime;
    return this;
  }

  public void unsetUpdateDatetime() {
    this.updateDatetime = null;
  }

  /** Returns true if field updateDatetime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDatetime() {
    return this.updateDatetime != null;
  }

  public void setUpdateDatetimeIsSet(boolean value) {
    if (!value) {
      this.updateDatetime = null;
    }
  }

  public String getPoliceId() {
    return this.policeId;
  }

  public SysUser setPoliceId(String policeId) {
    this.policeId = policeId;
    return this;
  }

  public void unsetPoliceId() {
    this.policeId = null;
  }

  /** Returns true if field policeId is set (has been assigned a value) and false otherwise */
  public boolean isSetPoliceId() {
    return this.policeId != null;
  }

  public void setPoliceIdIsSet(boolean value) {
    if (!value) {
      this.policeId = null;
    }
  }

  public String getCardId() {
    return this.cardId;
  }

  public SysUser setCardId(String cardId) {
    this.cardId = cardId;
    return this;
  }

  public void unsetCardId() {
    this.cardId = null;
  }

  /** Returns true if field cardId is set (has been assigned a value) and false otherwise */
  public boolean isSetCardId() {
    return this.cardId != null;
  }

  public void setCardIdIsSet(boolean value) {
    if (!value) {
      this.cardId = null;
    }
  }

  public String getUserTel() {
    return this.userTel;
  }

  public SysUser setUserTel(String userTel) {
    this.userTel = userTel;
    return this;
  }

  public void unsetUserTel() {
    this.userTel = null;
  }

  /** Returns true if field userTel is set (has been assigned a value) and false otherwise */
  public boolean isSetUserTel() {
    return this.userTel != null;
  }

  public void setUserTelIsSet(boolean value) {
    if (!value) {
      this.userTel = null;
    }
  }

  public String getUserUnit() {
    return this.userUnit;
  }

  public SysUser setUserUnit(String userUnit) {
    this.userUnit = userUnit;
    return this;
  }

  public void unsetUserUnit() {
    this.userUnit = null;
  }

  /** Returns true if field userUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetUserUnit() {
    return this.userUnit != null;
  }

  public void setUserUnitIsSet(boolean value) {
    if (!value) {
      this.userUnit = null;
    }
  }

  public String getIp() {
    return this.ip;
  }

  public SysUser setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public String getIfip() {
    return this.ifip;
  }

  public SysUser setIfip(String ifip) {
    this.ifip = ifip;
    return this;
  }

  public void unsetIfip() {
    this.ifip = null;
  }

  /** Returns true if field ifip is set (has been assigned a value) and false otherwise */
  public boolean isSetIfip() {
    return this.ifip != null;
  }

  public void setIfipIsSet(boolean value) {
    if (!value) {
      this.ifip = null;
    }
  }

  public String getRev1() {
    return this.rev1;
  }

  public SysUser setRev1(String rev1) {
    this.rev1 = rev1;
    return this;
  }

  public void unsetRev1() {
    this.rev1 = null;
  }

  /** Returns true if field rev1 is set (has been assigned a value) and false otherwise */
  public boolean isSetRev1() {
    return this.rev1 != null;
  }

  public void setRev1IsSet(boolean value) {
    if (!value) {
      this.rev1 = null;
    }
  }

  public String getRev2() {
    return this.rev2;
  }

  public SysUser setRev2(String rev2) {
    this.rev2 = rev2;
    return this;
  }

  public void unsetRev2() {
    this.rev2 = null;
  }

  /** Returns true if field rev2 is set (has been assigned a value) and false otherwise */
  public boolean isSetRev2() {
    return this.rev2 != null;
  }

  public void setRev2IsSet(boolean value) {
    if (!value) {
      this.rev2 = null;
    }
  }

  public String getRev3() {
    return this.rev3;
  }

  public SysUser setRev3(String rev3) {
    this.rev3 = rev3;
    return this;
  }

  public void unsetRev3() {
    this.rev3 = null;
  }

  /** Returns true if field rev3 is set (has been assigned a value) and false otherwise */
  public boolean isSetRev3() {
    return this.rev3 != null;
  }

  public void setRev3IsSet(boolean value) {
    if (!value) {
      this.rev3 = null;
    }
  }

  public String getRev4() {
    return this.rev4;
  }

  public SysUser setRev4(String rev4) {
    this.rev4 = rev4;
    return this;
  }

  public void unsetRev4() {
    this.rev4 = null;
  }

  /** Returns true if field rev4 is set (has been assigned a value) and false otherwise */
  public boolean isSetRev4() {
    return this.rev4 != null;
  }

  public void setRev4IsSet(boolean value) {
    if (!value) {
      this.rev4 = null;
    }
  }

  public String getRev5() {
    return this.rev5;
  }

  public SysUser setRev5(String rev5) {
    this.rev5 = rev5;
    return this;
  }

  public void unsetRev5() {
    this.rev5 = null;
  }

  /** Returns true if field rev5 is set (has been assigned a value) and false otherwise */
  public boolean isSetRev5() {
    return this.rev5 != null;
  }

  public void setRev5IsSet(boolean value) {
    if (!value) {
      this.rev5 = null;
    }
  }

  public String getRev6() {
    return this.rev6;
  }

  public SysUser setRev6(String rev6) {
    this.rev6 = rev6;
    return this;
  }

  public void unsetRev6() {
    this.rev6 = null;
  }

  /** Returns true if field rev6 is set (has been assigned a value) and false otherwise */
  public boolean isSetRev6() {
    return this.rev6 != null;
  }

  public void setRev6IsSet(boolean value) {
    if (!value) {
      this.rev6 = null;
    }
  }

  public String getRev7() {
    return this.rev7;
  }

  public SysUser setRev7(String rev7) {
    this.rev7 = rev7;
    return this;
  }

  public void unsetRev7() {
    this.rev7 = null;
  }

  /** Returns true if field rev7 is set (has been assigned a value) and false otherwise */
  public boolean isSetRev7() {
    return this.rev7 != null;
  }

  public void setRev7IsSet(boolean value) {
    if (!value) {
      this.rev7 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case TRUE_NAME:
      if (value == null) {
        unsetTrueName();
      } else {
        setTrueName((String)value);
      }
      break;

    case USER_LEVEL:
      if (value == null) {
        unsetUserLevel();
      } else {
        setUserLevel((String)value);
      }
      break;

    case OPEN_FLAG:
      if (value == null) {
        unsetOpenFlag();
      } else {
        setOpenFlag((String)value);
      }
      break;

    case DEFAULT_MODULE:
      if (value == null) {
        unsetDefaultModule();
      } else {
        setDefaultModule((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CREATE_USER:
      if (value == null) {
        unsetCreateUser();
      } else {
        setCreateUser((String)value);
      }
      break;

    case CREATE_DATETIME:
      if (value == null) {
        unsetCreateDatetime();
      } else {
        setCreateDatetime((String)value);
      }
      break;

    case UPDATE_USER:
      if (value == null) {
        unsetUpdateUser();
      } else {
        setUpdateUser((String)value);
      }
      break;

    case UPDATE_DATETIME:
      if (value == null) {
        unsetUpdateDatetime();
      } else {
        setUpdateDatetime((String)value);
      }
      break;

    case POLICE_ID:
      if (value == null) {
        unsetPoliceId();
      } else {
        setPoliceId((String)value);
      }
      break;

    case CARD_ID:
      if (value == null) {
        unsetCardId();
      } else {
        setCardId((String)value);
      }
      break;

    case USER_TEL:
      if (value == null) {
        unsetUserTel();
      } else {
        setUserTel((String)value);
      }
      break;

    case USER_UNIT:
      if (value == null) {
        unsetUserUnit();
      } else {
        setUserUnit((String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case IFIP:
      if (value == null) {
        unsetIfip();
      } else {
        setIfip((String)value);
      }
      break;

    case REV1:
      if (value == null) {
        unsetRev1();
      } else {
        setRev1((String)value);
      }
      break;

    case REV2:
      if (value == null) {
        unsetRev2();
      } else {
        setRev2((String)value);
      }
      break;

    case REV3:
      if (value == null) {
        unsetRev3();
      } else {
        setRev3((String)value);
      }
      break;

    case REV4:
      if (value == null) {
        unsetRev4();
      } else {
        setRev4((String)value);
      }
      break;

    case REV5:
      if (value == null) {
        unsetRev5();
      } else {
        setRev5((String)value);
      }
      break;

    case REV6:
      if (value == null) {
        unsetRev6();
      } else {
        setRev6((String)value);
      }
      break;

    case REV7:
      if (value == null) {
        unsetRev7();
      } else {
        setRev7((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case USERNAME:
      return getUsername();

    case PASSWORD:
      return getPassword();

    case TRUE_NAME:
      return getTrueName();

    case USER_LEVEL:
      return getUserLevel();

    case OPEN_FLAG:
      return getOpenFlag();

    case DEFAULT_MODULE:
      return getDefaultModule();

    case REMARK:
      return getRemark();

    case CREATE_USER:
      return getCreateUser();

    case CREATE_DATETIME:
      return getCreateDatetime();

    case UPDATE_USER:
      return getUpdateUser();

    case UPDATE_DATETIME:
      return getUpdateDatetime();

    case POLICE_ID:
      return getPoliceId();

    case CARD_ID:
      return getCardId();

    case USER_TEL:
      return getUserTel();

    case USER_UNIT:
      return getUserUnit();

    case IP:
      return getIp();

    case IFIP:
      return getIfip();

    case REV1:
      return getRev1();

    case REV2:
      return getRev2();

    case REV3:
      return getRev3();

    case REV4:
      return getRev4();

    case REV5:
      return getRev5();

    case REV6:
      return getRev6();

    case REV7:
      return getRev7();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USERNAME:
      return isSetUsername();
    case PASSWORD:
      return isSetPassword();
    case TRUE_NAME:
      return isSetTrueName();
    case USER_LEVEL:
      return isSetUserLevel();
    case OPEN_FLAG:
      return isSetOpenFlag();
    case DEFAULT_MODULE:
      return isSetDefaultModule();
    case REMARK:
      return isSetRemark();
    case CREATE_USER:
      return isSetCreateUser();
    case CREATE_DATETIME:
      return isSetCreateDatetime();
    case UPDATE_USER:
      return isSetUpdateUser();
    case UPDATE_DATETIME:
      return isSetUpdateDatetime();
    case POLICE_ID:
      return isSetPoliceId();
    case CARD_ID:
      return isSetCardId();
    case USER_TEL:
      return isSetUserTel();
    case USER_UNIT:
      return isSetUserUnit();
    case IP:
      return isSetIp();
    case IFIP:
      return isSetIfip();
    case REV1:
      return isSetRev1();
    case REV2:
      return isSetRev2();
    case REV3:
      return isSetRev3();
    case REV4:
      return isSetRev4();
    case REV5:
      return isSetRev5();
    case REV6:
      return isSetRev6();
    case REV7:
      return isSetRev7();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SysUser)
      return this.equals((SysUser)that);
    return false;
  }

  public boolean equals(SysUser that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_trueName = true && this.isSetTrueName();
    boolean that_present_trueName = true && that.isSetTrueName();
    if (this_present_trueName || that_present_trueName) {
      if (!(this_present_trueName && that_present_trueName))
        return false;
      if (!this.trueName.equals(that.trueName))
        return false;
    }

    boolean this_present_userLevel = true && this.isSetUserLevel();
    boolean that_present_userLevel = true && that.isSetUserLevel();
    if (this_present_userLevel || that_present_userLevel) {
      if (!(this_present_userLevel && that_present_userLevel))
        return false;
      if (!this.userLevel.equals(that.userLevel))
        return false;
    }

    boolean this_present_openFlag = true && this.isSetOpenFlag();
    boolean that_present_openFlag = true && that.isSetOpenFlag();
    if (this_present_openFlag || that_present_openFlag) {
      if (!(this_present_openFlag && that_present_openFlag))
        return false;
      if (!this.openFlag.equals(that.openFlag))
        return false;
    }

    boolean this_present_defaultModule = true && this.isSetDefaultModule();
    boolean that_present_defaultModule = true && that.isSetDefaultModule();
    if (this_present_defaultModule || that_present_defaultModule) {
      if (!(this_present_defaultModule && that_present_defaultModule))
        return false;
      if (!this.defaultModule.equals(that.defaultModule))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_createUser = true && this.isSetCreateUser();
    boolean that_present_createUser = true && that.isSetCreateUser();
    if (this_present_createUser || that_present_createUser) {
      if (!(this_present_createUser && that_present_createUser))
        return false;
      if (!this.createUser.equals(that.createUser))
        return false;
    }

    boolean this_present_createDatetime = true && this.isSetCreateDatetime();
    boolean that_present_createDatetime = true && that.isSetCreateDatetime();
    if (this_present_createDatetime || that_present_createDatetime) {
      if (!(this_present_createDatetime && that_present_createDatetime))
        return false;
      if (!this.createDatetime.equals(that.createDatetime))
        return false;
    }

    boolean this_present_updateUser = true && this.isSetUpdateUser();
    boolean that_present_updateUser = true && that.isSetUpdateUser();
    if (this_present_updateUser || that_present_updateUser) {
      if (!(this_present_updateUser && that_present_updateUser))
        return false;
      if (!this.updateUser.equals(that.updateUser))
        return false;
    }

    boolean this_present_updateDatetime = true && this.isSetUpdateDatetime();
    boolean that_present_updateDatetime = true && that.isSetUpdateDatetime();
    if (this_present_updateDatetime || that_present_updateDatetime) {
      if (!(this_present_updateDatetime && that_present_updateDatetime))
        return false;
      if (!this.updateDatetime.equals(that.updateDatetime))
        return false;
    }

    boolean this_present_policeId = true && this.isSetPoliceId();
    boolean that_present_policeId = true && that.isSetPoliceId();
    if (this_present_policeId || that_present_policeId) {
      if (!(this_present_policeId && that_present_policeId))
        return false;
      if (!this.policeId.equals(that.policeId))
        return false;
    }

    boolean this_present_cardId = true && this.isSetCardId();
    boolean that_present_cardId = true && that.isSetCardId();
    if (this_present_cardId || that_present_cardId) {
      if (!(this_present_cardId && that_present_cardId))
        return false;
      if (!this.cardId.equals(that.cardId))
        return false;
    }

    boolean this_present_userTel = true && this.isSetUserTel();
    boolean that_present_userTel = true && that.isSetUserTel();
    if (this_present_userTel || that_present_userTel) {
      if (!(this_present_userTel && that_present_userTel))
        return false;
      if (!this.userTel.equals(that.userTel))
        return false;
    }

    boolean this_present_userUnit = true && this.isSetUserUnit();
    boolean that_present_userUnit = true && that.isSetUserUnit();
    if (this_present_userUnit || that_present_userUnit) {
      if (!(this_present_userUnit && that_present_userUnit))
        return false;
      if (!this.userUnit.equals(that.userUnit))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_ifip = true && this.isSetIfip();
    boolean that_present_ifip = true && that.isSetIfip();
    if (this_present_ifip || that_present_ifip) {
      if (!(this_present_ifip && that_present_ifip))
        return false;
      if (!this.ifip.equals(that.ifip))
        return false;
    }

    boolean this_present_rev1 = true && this.isSetRev1();
    boolean that_present_rev1 = true && that.isSetRev1();
    if (this_present_rev1 || that_present_rev1) {
      if (!(this_present_rev1 && that_present_rev1))
        return false;
      if (!this.rev1.equals(that.rev1))
        return false;
    }

    boolean this_present_rev2 = true && this.isSetRev2();
    boolean that_present_rev2 = true && that.isSetRev2();
    if (this_present_rev2 || that_present_rev2) {
      if (!(this_present_rev2 && that_present_rev2))
        return false;
      if (!this.rev2.equals(that.rev2))
        return false;
    }

    boolean this_present_rev3 = true && this.isSetRev3();
    boolean that_present_rev3 = true && that.isSetRev3();
    if (this_present_rev3 || that_present_rev3) {
      if (!(this_present_rev3 && that_present_rev3))
        return false;
      if (!this.rev3.equals(that.rev3))
        return false;
    }

    boolean this_present_rev4 = true && this.isSetRev4();
    boolean that_present_rev4 = true && that.isSetRev4();
    if (this_present_rev4 || that_present_rev4) {
      if (!(this_present_rev4 && that_present_rev4))
        return false;
      if (!this.rev4.equals(that.rev4))
        return false;
    }

    boolean this_present_rev5 = true && this.isSetRev5();
    boolean that_present_rev5 = true && that.isSetRev5();
    if (this_present_rev5 || that_present_rev5) {
      if (!(this_present_rev5 && that_present_rev5))
        return false;
      if (!this.rev5.equals(that.rev5))
        return false;
    }

    boolean this_present_rev6 = true && this.isSetRev6();
    boolean that_present_rev6 = true && that.isSetRev6();
    if (this_present_rev6 || that_present_rev6) {
      if (!(this_present_rev6 && that_present_rev6))
        return false;
      if (!this.rev6.equals(that.rev6))
        return false;
    }

    boolean this_present_rev7 = true && this.isSetRev7();
    boolean that_present_rev7 = true && that.isSetRev7();
    if (this_present_rev7 || that_present_rev7) {
      if (!(this_present_rev7 && that_present_rev7))
        return false;
      if (!this.rev7.equals(that.rev7))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_username = true && (isSetUsername());
    list.add(present_username);
    if (present_username)
      list.add(username);

    boolean present_password = true && (isSetPassword());
    list.add(present_password);
    if (present_password)
      list.add(password);

    boolean present_trueName = true && (isSetTrueName());
    list.add(present_trueName);
    if (present_trueName)
      list.add(trueName);

    boolean present_userLevel = true && (isSetUserLevel());
    list.add(present_userLevel);
    if (present_userLevel)
      list.add(userLevel);

    boolean present_openFlag = true && (isSetOpenFlag());
    list.add(present_openFlag);
    if (present_openFlag)
      list.add(openFlag);

    boolean present_defaultModule = true && (isSetDefaultModule());
    list.add(present_defaultModule);
    if (present_defaultModule)
      list.add(defaultModule);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_createUser = true && (isSetCreateUser());
    list.add(present_createUser);
    if (present_createUser)
      list.add(createUser);

    boolean present_createDatetime = true && (isSetCreateDatetime());
    list.add(present_createDatetime);
    if (present_createDatetime)
      list.add(createDatetime);

    boolean present_updateUser = true && (isSetUpdateUser());
    list.add(present_updateUser);
    if (present_updateUser)
      list.add(updateUser);

    boolean present_updateDatetime = true && (isSetUpdateDatetime());
    list.add(present_updateDatetime);
    if (present_updateDatetime)
      list.add(updateDatetime);

    boolean present_policeId = true && (isSetPoliceId());
    list.add(present_policeId);
    if (present_policeId)
      list.add(policeId);

    boolean present_cardId = true && (isSetCardId());
    list.add(present_cardId);
    if (present_cardId)
      list.add(cardId);

    boolean present_userTel = true && (isSetUserTel());
    list.add(present_userTel);
    if (present_userTel)
      list.add(userTel);

    boolean present_userUnit = true && (isSetUserUnit());
    list.add(present_userUnit);
    if (present_userUnit)
      list.add(userUnit);

    boolean present_ip = true && (isSetIp());
    list.add(present_ip);
    if (present_ip)
      list.add(ip);

    boolean present_ifip = true && (isSetIfip());
    list.add(present_ifip);
    if (present_ifip)
      list.add(ifip);

    boolean present_rev1 = true && (isSetRev1());
    list.add(present_rev1);
    if (present_rev1)
      list.add(rev1);

    boolean present_rev2 = true && (isSetRev2());
    list.add(present_rev2);
    if (present_rev2)
      list.add(rev2);

    boolean present_rev3 = true && (isSetRev3());
    list.add(present_rev3);
    if (present_rev3)
      list.add(rev3);

    boolean present_rev4 = true && (isSetRev4());
    list.add(present_rev4);
    if (present_rev4)
      list.add(rev4);

    boolean present_rev5 = true && (isSetRev5());
    list.add(present_rev5);
    if (present_rev5)
      list.add(rev5);

    boolean present_rev6 = true && (isSetRev6());
    list.add(present_rev6);
    if (present_rev6)
      list.add(rev6);

    boolean present_rev7 = true && (isSetRev7());
    list.add(present_rev7);
    if (present_rev7)
      list.add(rev7);

    return list.hashCode();
  }

  @Override
  public int compareTo(SysUser other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrueName()).compareTo(other.isSetTrueName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrueName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trueName, other.trueName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserLevel()).compareTo(other.isSetUserLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userLevel, other.userLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenFlag()).compareTo(other.isSetOpenFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openFlag, other.openFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultModule()).compareTo(other.isSetDefaultModule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultModule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultModule, other.defaultModule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateUser()).compareTo(other.isSetCreateUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createUser, other.createUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDatetime()).compareTo(other.isSetCreateDatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDatetime, other.createDatetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateUser()).compareTo(other.isSetUpdateUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateUser, other.updateUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDatetime()).compareTo(other.isSetUpdateDatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDatetime, other.updateDatetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoliceId()).compareTo(other.isSetPoliceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoliceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.policeId, other.policeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardId()).compareTo(other.isSetCardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardId, other.cardId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserTel()).compareTo(other.isSetUserTel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserTel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userTel, other.userTel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserUnit()).compareTo(other.isSetUserUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userUnit, other.userUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIfip()).compareTo(other.isSetIfip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIfip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ifip, other.ifip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRev1()).compareTo(other.isSetRev1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRev1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rev1, other.rev1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRev2()).compareTo(other.isSetRev2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRev2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rev2, other.rev2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRev3()).compareTo(other.isSetRev3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRev3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rev3, other.rev3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRev4()).compareTo(other.isSetRev4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRev4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rev4, other.rev4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRev5()).compareTo(other.isSetRev5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRev5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rev5, other.rev5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRev6()).compareTo(other.isSetRev6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRev6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rev6, other.rev6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRev7()).compareTo(other.isSetRev7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRev7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rev7, other.rev7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SysUser(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trueName:");
    if (this.trueName == null) {
      sb.append("null");
    } else {
      sb.append(this.trueName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userLevel:");
    if (this.userLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.userLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("openFlag:");
    if (this.openFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.openFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultModule:");
    if (this.defaultModule == null) {
      sb.append("null");
    } else {
      sb.append(this.defaultModule);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createUser:");
    if (this.createUser == null) {
      sb.append("null");
    } else {
      sb.append(this.createUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDatetime:");
    if (this.createDatetime == null) {
      sb.append("null");
    } else {
      sb.append(this.createDatetime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateUser:");
    if (this.updateUser == null) {
      sb.append("null");
    } else {
      sb.append(this.updateUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDatetime:");
    if (this.updateDatetime == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDatetime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("policeId:");
    if (this.policeId == null) {
      sb.append("null");
    } else {
      sb.append(this.policeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardId:");
    if (this.cardId == null) {
      sb.append("null");
    } else {
      sb.append(this.cardId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userTel:");
    if (this.userTel == null) {
      sb.append("null");
    } else {
      sb.append(this.userTel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userUnit:");
    if (this.userUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.userUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ifip:");
    if (this.ifip == null) {
      sb.append("null");
    } else {
      sb.append(this.ifip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rev1:");
    if (this.rev1 == null) {
      sb.append("null");
    } else {
      sb.append(this.rev1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rev2:");
    if (this.rev2 == null) {
      sb.append("null");
    } else {
      sb.append(this.rev2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rev3:");
    if (this.rev3 == null) {
      sb.append("null");
    } else {
      sb.append(this.rev3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rev4:");
    if (this.rev4 == null) {
      sb.append("null");
    } else {
      sb.append(this.rev4);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rev5:");
    if (this.rev5 == null) {
      sb.append("null");
    } else {
      sb.append(this.rev5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rev6:");
    if (this.rev6 == null) {
      sb.append("null");
    } else {
      sb.append(this.rev6);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rev7:");
    if (this.rev7 == null) {
      sb.append("null");
    } else {
      sb.append(this.rev7);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SysUserStandardSchemeFactory implements SchemeFactory {
    public SysUserStandardScheme getScheme() {
      return new SysUserStandardScheme();
    }
  }

  private static class SysUserStandardScheme extends StandardScheme<SysUser> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SysUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRUE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trueName = iprot.readString();
              struct.setTrueNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userLevel = iprot.readString();
              struct.setUserLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPEN_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openFlag = iprot.readString();
              struct.setOpenFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEFAULT_MODULE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.defaultModule = iprot.readString();
              struct.setDefaultModuleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createUser = iprot.readString();
              struct.setCreateUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_DATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDatetime = iprot.readString();
              struct.setCreateDatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateUser = iprot.readString();
              struct.setUpdateUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UPDATE_DATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDatetime = iprot.readString();
              struct.setUpdateDatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // POLICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.policeId = iprot.readString();
              struct.setPoliceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardId = iprot.readString();
              struct.setCardIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // USER_TEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userTel = iprot.readString();
              struct.setUserTelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // USER_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userUnit = iprot.readString();
              struct.setUserUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // IFIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ifip = iprot.readString();
              struct.setIfipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REV1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rev1 = iprot.readString();
              struct.setRev1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REV2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rev2 = iprot.readString();
              struct.setRev2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // REV3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rev3 = iprot.readString();
              struct.setRev3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // REV4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rev4 = iprot.readString();
              struct.setRev4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // REV5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rev5 = iprot.readString();
              struct.setRev5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // REV6
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rev6 = iprot.readString();
              struct.setRev6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // REV7
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rev7 = iprot.readString();
              struct.setRev7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SysUser struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.trueName != null) {
        oprot.writeFieldBegin(TRUE_NAME_FIELD_DESC);
        oprot.writeString(struct.trueName);
        oprot.writeFieldEnd();
      }
      if (struct.userLevel != null) {
        oprot.writeFieldBegin(USER_LEVEL_FIELD_DESC);
        oprot.writeString(struct.userLevel);
        oprot.writeFieldEnd();
      }
      if (struct.openFlag != null) {
        oprot.writeFieldBegin(OPEN_FLAG_FIELD_DESC);
        oprot.writeString(struct.openFlag);
        oprot.writeFieldEnd();
      }
      if (struct.defaultModule != null) {
        oprot.writeFieldBegin(DEFAULT_MODULE_FIELD_DESC);
        oprot.writeString(struct.defaultModule);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.createUser != null) {
        oprot.writeFieldBegin(CREATE_USER_FIELD_DESC);
        oprot.writeString(struct.createUser);
        oprot.writeFieldEnd();
      }
      if (struct.createDatetime != null) {
        oprot.writeFieldBegin(CREATE_DATETIME_FIELD_DESC);
        oprot.writeString(struct.createDatetime);
        oprot.writeFieldEnd();
      }
      if (struct.updateUser != null) {
        oprot.writeFieldBegin(UPDATE_USER_FIELD_DESC);
        oprot.writeString(struct.updateUser);
        oprot.writeFieldEnd();
      }
      if (struct.updateDatetime != null) {
        oprot.writeFieldBegin(UPDATE_DATETIME_FIELD_DESC);
        oprot.writeString(struct.updateDatetime);
        oprot.writeFieldEnd();
      }
      if (struct.policeId != null) {
        oprot.writeFieldBegin(POLICE_ID_FIELD_DESC);
        oprot.writeString(struct.policeId);
        oprot.writeFieldEnd();
      }
      if (struct.cardId != null) {
        oprot.writeFieldBegin(CARD_ID_FIELD_DESC);
        oprot.writeString(struct.cardId);
        oprot.writeFieldEnd();
      }
      if (struct.userTel != null) {
        oprot.writeFieldBegin(USER_TEL_FIELD_DESC);
        oprot.writeString(struct.userTel);
        oprot.writeFieldEnd();
      }
      if (struct.userUnit != null) {
        oprot.writeFieldBegin(USER_UNIT_FIELD_DESC);
        oprot.writeString(struct.userUnit);
        oprot.writeFieldEnd();
      }
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      if (struct.ifip != null) {
        oprot.writeFieldBegin(IFIP_FIELD_DESC);
        oprot.writeString(struct.ifip);
        oprot.writeFieldEnd();
      }
      if (struct.rev1 != null) {
        oprot.writeFieldBegin(REV1_FIELD_DESC);
        oprot.writeString(struct.rev1);
        oprot.writeFieldEnd();
      }
      if (struct.rev2 != null) {
        oprot.writeFieldBegin(REV2_FIELD_DESC);
        oprot.writeString(struct.rev2);
        oprot.writeFieldEnd();
      }
      if (struct.rev3 != null) {
        oprot.writeFieldBegin(REV3_FIELD_DESC);
        oprot.writeString(struct.rev3);
        oprot.writeFieldEnd();
      }
      if (struct.rev4 != null) {
        oprot.writeFieldBegin(REV4_FIELD_DESC);
        oprot.writeString(struct.rev4);
        oprot.writeFieldEnd();
      }
      if (struct.rev5 != null) {
        oprot.writeFieldBegin(REV5_FIELD_DESC);
        oprot.writeString(struct.rev5);
        oprot.writeFieldEnd();
      }
      if (struct.rev6 != null) {
        oprot.writeFieldBegin(REV6_FIELD_DESC);
        oprot.writeString(struct.rev6);
        oprot.writeFieldEnd();
      }
      if (struct.rev7 != null) {
        oprot.writeFieldBegin(REV7_FIELD_DESC);
        oprot.writeString(struct.rev7);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SysUserTupleSchemeFactory implements SchemeFactory {
    public SysUserTupleScheme getScheme() {
      return new SysUserTupleScheme();
    }
  }

  private static class SysUserTupleScheme extends TupleScheme<SysUser> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SysUser struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUsername()) {
        optionals.set(1);
      }
      if (struct.isSetPassword()) {
        optionals.set(2);
      }
      if (struct.isSetTrueName()) {
        optionals.set(3);
      }
      if (struct.isSetUserLevel()) {
        optionals.set(4);
      }
      if (struct.isSetOpenFlag()) {
        optionals.set(5);
      }
      if (struct.isSetDefaultModule()) {
        optionals.set(6);
      }
      if (struct.isSetRemark()) {
        optionals.set(7);
      }
      if (struct.isSetCreateUser()) {
        optionals.set(8);
      }
      if (struct.isSetCreateDatetime()) {
        optionals.set(9);
      }
      if (struct.isSetUpdateUser()) {
        optionals.set(10);
      }
      if (struct.isSetUpdateDatetime()) {
        optionals.set(11);
      }
      if (struct.isSetPoliceId()) {
        optionals.set(12);
      }
      if (struct.isSetCardId()) {
        optionals.set(13);
      }
      if (struct.isSetUserTel()) {
        optionals.set(14);
      }
      if (struct.isSetUserUnit()) {
        optionals.set(15);
      }
      if (struct.isSetIp()) {
        optionals.set(16);
      }
      if (struct.isSetIfip()) {
        optionals.set(17);
      }
      if (struct.isSetRev1()) {
        optionals.set(18);
      }
      if (struct.isSetRev2()) {
        optionals.set(19);
      }
      if (struct.isSetRev3()) {
        optionals.set(20);
      }
      if (struct.isSetRev4()) {
        optionals.set(21);
      }
      if (struct.isSetRev5()) {
        optionals.set(22);
      }
      if (struct.isSetRev6()) {
        optionals.set(23);
      }
      if (struct.isSetRev7()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetTrueName()) {
        oprot.writeString(struct.trueName);
      }
      if (struct.isSetUserLevel()) {
        oprot.writeString(struct.userLevel);
      }
      if (struct.isSetOpenFlag()) {
        oprot.writeString(struct.openFlag);
      }
      if (struct.isSetDefaultModule()) {
        oprot.writeString(struct.defaultModule);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreateUser()) {
        oprot.writeString(struct.createUser);
      }
      if (struct.isSetCreateDatetime()) {
        oprot.writeString(struct.createDatetime);
      }
      if (struct.isSetUpdateUser()) {
        oprot.writeString(struct.updateUser);
      }
      if (struct.isSetUpdateDatetime()) {
        oprot.writeString(struct.updateDatetime);
      }
      if (struct.isSetPoliceId()) {
        oprot.writeString(struct.policeId);
      }
      if (struct.isSetCardId()) {
        oprot.writeString(struct.cardId);
      }
      if (struct.isSetUserTel()) {
        oprot.writeString(struct.userTel);
      }
      if (struct.isSetUserUnit()) {
        oprot.writeString(struct.userUnit);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetIfip()) {
        oprot.writeString(struct.ifip);
      }
      if (struct.isSetRev1()) {
        oprot.writeString(struct.rev1);
      }
      if (struct.isSetRev2()) {
        oprot.writeString(struct.rev2);
      }
      if (struct.isSetRev3()) {
        oprot.writeString(struct.rev3);
      }
      if (struct.isSetRev4()) {
        oprot.writeString(struct.rev4);
      }
      if (struct.isSetRev5()) {
        oprot.writeString(struct.rev5);
      }
      if (struct.isSetRev6()) {
        oprot.writeString(struct.rev6);
      }
      if (struct.isSetRev7()) {
        oprot.writeString(struct.rev7);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SysUser struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(3)) {
        struct.trueName = iprot.readString();
        struct.setTrueNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userLevel = iprot.readString();
        struct.setUserLevelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.openFlag = iprot.readString();
        struct.setOpenFlagIsSet(true);
      }
      if (incoming.get(6)) {
        struct.defaultModule = iprot.readString();
        struct.setDefaultModuleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createUser = iprot.readString();
        struct.setCreateUserIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createDatetime = iprot.readString();
        struct.setCreateDatetimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.updateUser = iprot.readString();
        struct.setUpdateUserIsSet(true);
      }
      if (incoming.get(11)) {
        struct.updateDatetime = iprot.readString();
        struct.setUpdateDatetimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.policeId = iprot.readString();
        struct.setPoliceIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cardId = iprot.readString();
        struct.setCardIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.userTel = iprot.readString();
        struct.setUserTelIsSet(true);
      }
      if (incoming.get(15)) {
        struct.userUnit = iprot.readString();
        struct.setUserUnitIsSet(true);
      }
      if (incoming.get(16)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(17)) {
        struct.ifip = iprot.readString();
        struct.setIfipIsSet(true);
      }
      if (incoming.get(18)) {
        struct.rev1 = iprot.readString();
        struct.setRev1IsSet(true);
      }
      if (incoming.get(19)) {
        struct.rev2 = iprot.readString();
        struct.setRev2IsSet(true);
      }
      if (incoming.get(20)) {
        struct.rev3 = iprot.readString();
        struct.setRev3IsSet(true);
      }
      if (incoming.get(21)) {
        struct.rev4 = iprot.readString();
        struct.setRev4IsSet(true);
      }
      if (incoming.get(22)) {
        struct.rev5 = iprot.readString();
        struct.setRev5IsSet(true);
      }
      if (incoming.get(23)) {
        struct.rev6 = iprot.readString();
        struct.setRev6IsSet(true);
      }
      if (incoming.get(24)) {
        struct.rev7 = iprot.readString();
        struct.setRev7IsSet(true);
      }
    }
  }

}

